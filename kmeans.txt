import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
# Generate synthetic data
X, _ = make_blobs(n_samples=300, centers=1, cluster_std=1.0, random_state=42)

def compute_sse(data, centers):
    sse = 0
    for i, center in enumerate(centers):
        sse += np.sum((data - center)**2)
    return sse

def bisecting_kmeans(X, final_k):
    clusters = [X]

    while len(clusters) < final_k:
        # Select cluster with max SSE
        sse_list = [compute_sse(cluster, [cluster.mean(axis=0)]) for cluster in clusters]
        idx = np.argmax(sse_list)
        
        # Bisect the cluster
        cluster = clusters.pop(idx)
        kmeans = KMeans(n_clusters=2, random_state=0).fit(cluster)
        labels = kmeans.labels_

        clusters.append(cluster[labels == 0])
        clusters.append(cluster[labels == 1])

    # Plot clusters
    colors = ['r', 'g', 'b', 'c', 'm', 'y']
    for i, cluster in enumerate(clusters):
        plt.scatter(cluster[:, 0], cluster[:, 1], c=colors[i % len(colors)], label=f'Cluster {i+1}')
    plt.title('Bisecting K-Means Clustering')
    plt.legend()
    plt.show()

bisecting_kmeans(X,Â 4)
